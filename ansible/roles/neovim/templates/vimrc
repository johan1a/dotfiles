 " ____  _             _                  _
" |  _ \| |_   _  __ _(_)_ __    ___  ___| |_ _   _ _ __
" | |_) | | | | |/ _` | | '_ \  / __|/ _ \ __| | | | '_ \
" |  __/| | |_| | (_| | | | | | \__ \  __/ |_| |_| | |_) |
" |_|   |_|\__,_|\__, |_|_| |_| |___/\___|\__|\__,_| .__/
 "               |___/                             |_|

if &shell =~# 'fish$'
    set shell=bash
endif

set nocompatible              " Don't emulate vi
filetype off                  " required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'airblade/vim-gitgutter'
Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'autozimu/LanguageClient-neovim'
Plugin 'bkad/CamelCaseMotion'
Plugin 'chriskempson/base16-vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'clojure-vim/async-clj-omni'
Plugin 'dag/vim-fish'
Plugin 'dkprice/vim-easygrep'
Plugin 'honza/vim-snippets'
Plugin 'jreybert/vimagit'
Plugin 'junegunn/vim-slash'
Plugin 'justinmk/vim-sneak'
Plugin 'leafgarland/typescript-vim'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'Shougo/deoplete.nvim'
Plugin 'SirVer/ultisnips'
Plugin 'tommcdo/vim-lion'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'udalov/kotlin-vim'
Plugin 'vimwiki/vimwiki'
Plugin 'VundleVim/Vundle.vim'
Plugin 'zchee/deoplete-jedi'

call vundle#end()
filetype plugin indent on
let mapleader =  "\<Space>"

 " ____  _             _                          __ _
" |  _ \| |_   _  __ _(_)_ __     ___ ___  _ __  / _(_) __ _
" | |_) | | | | |/ _` | | '_ \   / __/ _ \| '_ \| |_| |/ _` |
" |  __/| | |_| | (_| | | | | | | (_| (_) | | | |  _| | (_| |
" |_|   |_|\__,_|\__, |_|_| |_|  \___\___/|_| |_|_| |_|\__, |
 "               |___/                                 |___/

" =========== deoplete ===========

let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
let g:deoplete#disable_auto_complete = 0

" Enter: complete&close popup if visible (so next Enter works); else: break undo
inoremap <silent><expr> <Cr> pumvisible() ?
            \ deoplete#mappings#close_popup() : "<C-g>u<Cr>"

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

" Escape: exit autocompletion, go to Normal mo
inoremap <silent><expr> <Esc> pumvisible() ? "<C-e><Esc>" : "<Esc>"

" Ctrl-Space: summon FULL (synced) autocompletion
inoremap <silent><expr> <C-Space> deoplete#mappings#manual_complete()

augroup deoplete
    autocmd!
    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
augroup END

let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.#]*'

" =========== ultisnips ===========

set rtp^=$HOME/.vim/bundle/ultisnips

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-e>"
let g:UltiSnipsJumpBackwardTrigger="<c-i>"
let g:UltiSnipsListSnippets="<c-p>"

inoremap <silent> <c-e> <C-R>=UltiSnips#ExpandSnippetOrJump()<cr>

let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/custom_snippets" " Custom snips dir
let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom_snippets"]

" =========== gitgutter ===========

let g:gitgutter_max_signs = 1000

" =========== fzf ===========

set rtp+=~/.fzf
nnoremap <leader>n :FZF<cr>
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" =========== LanguageClient-neovim ===========

let g:lsp_async_completion = 1
" setlocal omnifunc=lsp#complete “ in after/ftplugin/ft.vim

let g:LanguageClient_serverCommands = {
    \ 'haskell': ['hie', '--lsp'],
    \ 'groovy': ['java', '-jar', '/home/johan/programs/groovy-language-server.jar'],
    \ 'python': ['pyls']
    \ }

nnoremap <silent> gk :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> <leader>fd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> gr :call LanguageClient_textDocument_rename()<CR>
nnoremap <silent> <leader>fr :call LanguageClient_textDocument_references()<CR>

" =========== Vimwiki ===========

let g:vimwiki_list = [{'path': '~/vimwiki/',
                     \ 'syntax': 'markdown', 'ext': '.md'}]

" =========== EasyGrep ===========

let g:EasyGrepFilesToExclude='*.log,tags,.git,external_documentation,documentation,build,classes'
let g:EasyGrepRecursive=1
let g:EasyGrepCommand=1

" =========== Gutentags =========

:set statusline+=%{gutentags#statusline('[Generating...]')}

" =========== tagbar =========

let g:tagbar_left=1

" =========== vim-dispatch ===========

augroup vim_dispatch
    autocmd!
    autocmd FileType java       let b:dispatch = 'javac %'
    autocmd FileType groovy     let b:dispatch = 'source ~/.sdkman/bin/sdkman-init.sh; grails test-app'
    autocmd FileType typescript let b:dispatch = 'ng test && ng lint'
    autocmd FileType python     let b:dispatch = 'python -m unittest discover'
augroup END

nnoremap <leader>d Dispatch<CR>

" =========== tmux-navigator ===========

let g:tmux_navigator_disable_when_zoomed = 1 " Disable tmux auto zoom out

" =========== tagbar ===========

nmap <a-t> :TagbarToggle<CR>

" =========== vim-fireplace ===========

nnoremap <leader>w :Eval<CR>
vnoremap <leader>w :Eval<CR>
nnoremap <a-r> :Require<CR>

" =========== CamelCaseMotion ===========

map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" =========== unimpaired-vim ===========

nmap <c-up> [e
nmap <c-down> ]e
vmap <c-up> [egv
vmap <c-down> ]egv

" =========== vim-sneak ===========

let g:sneak#label = 1

" =========== Magit ===========

nnoremap <leader>ma :Magit<cr>

  " ____                           _            _   _   _
 " / ___| ___ _ __   ___ _ __ __ _| |  ___  ___| |_| |_(_)_ __   __ _ ___
" | |  _ / _ \ '_ \ / _ \ '__/ _` | | / __|/ _ \ __| __| | '_ \ / _` / __|
" | |_| |  __/ | | |  __/ | | (_| | | \__ \  __/ |_| |_| | | | | (_| \__ \
 " \____|\___|_| |_|\___|_|  \__,_|_| |___/\___|\__|\__|_|_| |_|\__, |___/
  "                                                             |___/

syntax enable
set autoindent
set smartindent
set autoread    " Automatically read external changes
set scrolloff=1 " Leave margin when scrolling
set sidescrolloff=5
set display+=lastline
set hidden
set gdefault

" Magic to make autoread actually work
" Trigger autoread when changing buffers while inside vim:
augroup general_settings
    autocmd!
    au FocusGained,BufEnter * :checktime
    au CursorHold * checktime
augroup END

if filereadable(expand('~/.vimrc_background'))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" =========== help ===========

augroup helpfiles
  au!
  au BufRead,BufEnter */doc/* wincmd L
augroup END

" =========== filetypes ===========

augroup filetypes
  autocmd BufNewFile,BufRead *.gson      setlocal ft=groovy
  autocmd BufNewFile,BufRead *.ts        setlocal ft=typescript
  autocmd Filetype groovy                setlocal makeprg=./gradlew\ test
  autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby
  autocmd FileType json nnoremap <buffer> <leader>ff :%!python -m json.tool<cr>
  autocmd FileType xml  noremap  <buffer> <leader>ff :%!xmllint --format -<cr>
  autocmd FileType fish compiler fish
  " Set this to have long lines wrap inside comments.
  autocmd FileType fish setlocal textwidth=79
augroup END


" =========== search ===========

set grepprg=ag\ $*

nnoremap <leader>g :Grep 

" Fuzzy finding
" :b <substring of open buffer> to jump to buffer
" :find <substring of open buffer>
set path+=**

" Tab completion behavior
set wildmode=longest,list,full

" Display all matches when tab completing
set wildmenu

" =========== Splits ===========
augroup splits
    autocmd!
    autocmd VimResized * wincmd =
augroup END

set splitbelow
set splitright

" =========== Tabs and spaces  ===========
set expandtab                          " insert space characters whenever the tab key is pressed,
set tabstop=2                          " The number of space characters that will be inserted when the tab key is pressed
set shiftwidth=2                       " The number of space characters inserted for indentation with the reindent operations (<< and >>)
set softtabstop=0
set list                               " Display tabs and trailing spaces
set listchars=tab:▸–,trail:·
set listchars+=nbsp:⦸                  " CIRCLED REVERSE SOLIDUS (U+29B8, UTF-8: E2 A6 B8)
set nojoinspaces                       " don't autoinsert two spaces after '.', '?', '!' for join command

" Set color of listchars
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" =========== Numbering  ===========

set number
set relativenumber
set ruler
set showcmd

 " _  __
" | |/ /___ _   _   _ __ ___   __ _ _ __  ___
" | ' // _ \ | | | | '_ ` _ \ / _` | '_ \/ __|
" | . \  __/ |_| | | | | | | | (_| | |_) \__ \
" |_|\_\___|\__, | |_| |_| |_|\__,_| .__/|___/
 "          |___/                  |_|

" Jump to tag under cursor
nnoremap <leader>i <C-]>zz

" Jump back up the tag stack
nnoremap <leader>u <C-t>zz

" Go to alternate file
nnoremap <leader><leader> <C-^>

" Reload config
nnoremap <leader>r :source ~/.vimrc<CR>
nnoremap <leader>e :NERDTreeFind<CR>
nnoremap <leader>k :NERDTreeToggle<CR>
nnoremap <leader>q :NERDTreeClose<CR>:q<CR>

" Increment / Decrement numbers
nnoremap <A-a> <C-a>
nnoremap <A-x> <C-x>

" replace and jump
nnoremap c* *Ncgn
nnoremap gs :%s/q<Left>

" Live preview of :%s/
set inccommand=split

" Copy / Paste

" Yank from cursor to end of line
map Y y$

" Search using copy buffer
nnoremap <leader>7 /<C-R>0<CR>
nnoremap <leader>' ?<C-R>0<CR>

" ALWAYS use the clipboard for ALL operations (as opposed
" to interacting with the '+' and/or '*' registers explicitly):
set clipboard+=unnamedplus

" Use system copy buffer
nnoremap y "*y
vnoremap y "*y
nnoremap p "*p
vnoremap p "*p
vnoremap c "*c
nnoremap c "*c
vnoremap C "*C
nnoremap C "*C
nnoremap d "*d
vnoremap d "*d

noremap <down>   <c-w>+
noremap <up>     <c-w>-
noremap <left>  5<c-w><
noremap <right> 5<c-w>>

" neovim term
tnoremap <C-o> <C-\><C-n>
tnoremap <leader><esc> <C-\><esc>

" Execute a shell command and read in the results
noremap Q yyp!!$SHELL<CR>
" Tabs and splits

nnoremap <s-l> :bnext<cr>
nnoremap <s-h> :bprevious<cr>
nnoremap <leader>l :ls<cr>
nnoremap <leader>s :sp<cr>
nnoremap <leader>t :vs<cr>
nnoremap <tab> :tabn<cr>
nnoremap <s-tab> :tabp<cr>

" Holy shell, Batman!!!
function! Fish_open()
  set shell=fish
  :tabe fish
  term
  set shell=bash
endfunction

nnoremap <leader>j :call Fish_open()<cr>a

" Change to the directory of the current file
nnoremap <silent> cd :<c-u>cd %:h \| pwd<cr>

nnoremap <leader>aa :e ~/.vimrc<cr>
nnoremap <leader>ai :e ~/.config/i3/config<cr>

nnoremap <leader>mr :Rename 
nnoremap <leader>mm :Move 
nnoremap <leader>ms :SudoWrite<cr>

nnoremap <leader>1 :!

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif
